import java.util.*;
import java.util.stream.Collectors;

class Employee {
    private int id;
    private String name;
    private int age;
    private double salary;
    private String department;

    public Employee(int id, String name, int age, double salary, String department) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.salary = salary;
        this.department = department;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public double getSalary() {
        return salary;
    }

    public String getDepartment() {
        return department;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{id=" + id + ", name='" + name + "', age=" + age + ", salary=" + salary + ", department='" + department + "'}";
    }
}

class Main {

    public static void main(String[] args) {
        List<Employee> employees = Arrays.asList(
            new Employee(1, "Alice", 30, 70000, "IT"),
            new Employee(2, "Bob", 35, 55000, "HR"),
            new Employee(3, "Charlie", 28, 45000, "Finance"),
            new Employee(4, "David", 40, 90000, "IT"),
            new Employee(5, "Eve", 25, 30000, "Marketing"),
            new Employee(6, "Frank", 50, 120000, "Finance"),
            new Employee(7, "Grace", 27, 80000, "HR"),
            new Employee(8, "Hannah", 45, 110000, "IT")
        );

        // 1. Filter employees with salary greater than 50000
        List<Employee> highEarners = employees.stream()
            .filter(e -> e.getSalary() > 50000)
            .collect(Collectors.toList());
        System.out.println("High earners: " + highEarners);

        // 2. Find the employee with the highest salary
        Optional<Employee> highestPaid = employees.stream()
            .max(Comparator.comparing(Employee::getSalary));
        highestPaid.ifPresent(employee -> System.out.println("Highest paid employee: " + employee));

        // 3. Find the employee with the lowest salary
        Optional<Employee> lowestPaid = employees.stream()
            .min(Comparator.comparing(Employee::getSalary));
        lowestPaid.ifPresent(employee -> System.out.println("Lowest paid employee: " + employee));

        // 4. Count employees in a specific department
        long itCount = employees.stream()
            .filter(e -> "IT".equals(e.getDepartment()))
            .count();
        System.out.println("Number of IT employees: " + itCount);

        // 5. Find all employees' names in a specific department
        List<String> hrNames = employees.stream()
            .filter(e -> "HR".equals(e.getDepartment()))
            .map(Employee::getName)
            .collect(Collectors.toList());
        System.out.println("HR employees: " + hrNames);

        // 6. Get a list of all employee names
        List<String> allNames = employees.stream()
            .map(Employee::getName)
            .collect(Collectors.toList());
        System.out.println("All employee names: " + allNames);

        // 7. Group employees by department
        Map<String, List<Employee>> employeesByDept = employees.stream()
            .collect(Collectors.groupingBy(Employee::getDepartment));
        System.out.println("Employees by department: " + employeesByDept);

        // 8. Find the average salary of employees
        double averageSalary = employees.stream()
            .mapToDouble(Employee::getSalary)
            .average()
            .orElse(0.0);
        System.out.println("Average salary: " + averageSalary);

        // 9. Sum the salaries of all employees
        double totalSalary = employees.stream()
            .mapToDouble(Employee::getSalary)
            .sum();
        System.out.println("Total salary: " + totalSalary);

        // 10. Find the highest salary in each department
        Map<String, Optional<Employee>> highestSalaryByDept = employees.stream()
            .collect(Collectors.groupingBy(Employee::getDepartment,
                Collectors.maxBy(Comparator.comparing(Employee::getSalary))));
        System.out.println("Highest salary by department: " + highestSalaryByDept);

        // 11. Sort employees by salary
        List<Employee> sortedBySalary = employees.stream()
            .sorted(Comparator.comparing(Employee::getSalary))
            .collect(Collectors.toList());
        System.out.println("Employees sorted by salary: " + sortedBySalary);

        // 12. Get a list of employees sorted by name
        List<Employee> sortedByName = employees.stream()
            .sorted(Comparator.comparing(Employee::getName))
            .collect(Collectors.toList());
        System.out.println("Employees sorted by name: " + sortedByName);

        // 13. Get distinct departments
        List<String> departments = employees.stream()
            .map(Employee::getDepartment)
            .distinct()
            .collect(Collectors.toList());
        System.out.println("Distinct departments: " + departments);

        // 14. Check if any employee has a salary greater than 100000
        boolean hasHighEarner = employees.stream()
            .anyMatch(e -> e.getSalary() > 100000);
        System.out.println("Any employee with salary > 100000: " + hasHighEarner);

        // 15. Check if all employees are in the 'IT' department
        boolean allInIT = employees.stream()
            .allMatch(e -> "IT".equals(e.getDepartment()));
        System.out.println("All employees in IT: " + allInIT);

        // 16. Check if no employee is in the 'HR' department
        boolean noneInHR = employees.stream()
            .noneMatch(e -> "HR".equals(e.getDepartment()));
        System.out.println("No employee in HR: " + noneInHR);

        // 17. Concatenate all employee names into a single string, separated by commas
        String names = employees.stream()
            .map(Employee::getName)
            .collect(Collectors.joining(", "));
        System.out.println("Concatenated names: " + names);

        // 18. Partition employees into two groups: salary > 50000 and salary <= 50000
        Map<Boolean, List<Employee>> partitionedBySalary = employees.stream()
            .collect(Collectors.partitioningBy(e -> e.getSalary() > 50000));
        System.out.println("Partitioned by salary: " + partitionedBySalary);

        // 19. Get the names of employees in a list
        List<String> employeeNames = employees.stream()
            .map(Employee::getName)
            .collect(Collectors.toList());
        System.out.println("Employee names: " + employeeNames);

        // 20. Create a map of employee names to salaries
        Map<String, Double> nameToSalary = employees.stream()
            .collect(Collectors.toMap(Employee::getName, Employee::getSalary));
        System.out.println("Name to salary map: " + nameToSalary);

        // 21. Find employees whose names start with 'A'
        List<Employee> namesStartingWithA = employees.stream()
            .filter(e -> e.getName().startsWith("A"))
            .collect(Collectors.toList());
        System.out.println("Names starting with A: " + namesStartingWithA);

        // 22. Increase salary of all employees by 10%
        List<Employee> increasedSalaries = employees.stream()
            .map(e -> {
                e.setSalary(e.getSalary() * 1.10);
                return e;
            })
            .collect(Collectors.toList());
        System.out.println("Increased salaries: " + increasedSalaries);

        // 23. Find the name of the employee with the highest salary
        String highestPaidName = employees.stream()
            .max(Comparator.comparing(Employee::getSalary))
            .map(Employee::getName)
            .orElse("No employees");
        System.out.println("Highest paid employee name: " + highestPaidName);

        // 24. Get the total number of departments
        long numberOfDepartments = employees.stream()
            .map(Employee::getDepartment)
            .distinct()
            .count();
        System.out.println("Total number of departments: " + numberOfDepartments);

        // 25. Find the first employee with a salary greater than 75000
        Optional<Employee> firstHighEarner = employees.stream()
            .filter(e -> e.getSalary() > 75000)
            .findFirst();
        firstHighEarner.ifPresent(employee -> System.out.println("First high earner: " + employee));

        // 26. Sort employees by department and then by name
        List<Employee> sortedByDeptAndName = employees.stream()
            .sorted(Comparator.comparing(Employee::getDepartment)
                .thenComparing(Employee::getName))
            .collect(Collectors.toList());
        System.out.println("Employees sorted by department and name: " + sortedByDeptAndName);

        // 27. Check if any employee is older than 50
        boolean hasOlderThan50 = employees.stream()
            .anyMatch(e -> e.getAge() > 50);
        System.out.println("Any employee older than 50: " + hasOlderThan50);

    }
}
